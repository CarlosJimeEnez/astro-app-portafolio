---
import Main from "@/layouts/main.astro";
import Header from "@/layouts/header.astro";
import { Image } from "astro:assets";
import { Github, ExternalLink, ArrowLeft } from "lucide-react";
import { Button } from "@/components/ui/button";
import Info from "@/layouts/info.astro";

// Define la función getStaticPaths requerida para rutas dinámicas
export function getStaticPaths() {
  // Define los datos de los proyectos
  const projects = [
    {
      slug: "sistema-reclutamiento",
      title: "Sistema de Reclutamiento Interno (Web App)",
      subtitle: "Plataforma para gestión de procesos de reclutamiento",
      description:
        "Plataforma web para gestionar el proceso de reclutamiento interno de una empresa. Permite a los empleados postularse a vacantes internas, y a los reclutadores gestionar todo el proceso de selección.",
      imageUrl: "/ERP.png",
      
      technologies: ["WebSockets","Supabase", "Vue.js", "Tailwind", "Vercel", "Shadcn Vue", "Pinia"],
      features: [
        "Gestión de vacantes internas",
        "Sistema de postulaciones",
        "Seguimiento de procesos de selección",
        "Notificaciones automáticas",
      ],
      challenges: [
        "Actualización en tiempo real",
        "Integración con sistemas existentes",
        "Implementación de permisos por roles",
      ],
      learnings: [
        "Implementación de WebSockets",
        "Optimización de consultas en Supabase",
        "Mejores prácticas en Vue.js",
        "Diseño de interfaces intuitivas",
      ],
    },
    {
      slug: "punto-venta",
      title: "Punto de Venta (POS)",
      subtitle: "Sistema de venta para cafetería con brazo robótico",
      description:
        "Aplicación de escritorio que se conecta con API de brazo robótico para vender cafés. Integra gestión de inventario, ventas y reportes.",
      imageUrl: "/POS.png",
      technologies: ["Angular", "Tauri", "Flask", "Supabase", "Asp.net"],
      features: [
        "Interfaz para control de brazo robótico",
        "Gestión de inventario en tiempo real",
        "Menu de productos",
        "Integración con impresoras de tickets",
      ],
      challenges: [
        "Uso de Tauri con rust",
        "Gestión de inventario",
        "Comunicación con API de brazo robótico",
        "Sincronización offline/online",
      ],
      learnings: [
        "Comunicación con API de brazo robótico",
        "Desarrollo de aplicaciones de escritorio con Tauri",
        "Integración de sistemas heterogéneos",
        "Optimización de rendimiento en tiempo real",
      ],
    },
    {
      slug: "erp-inventario",
      title: "ERP de Gestión de Inventario de Herramientas",
      subtitle: "Sistema integral para control de herramientas",
      description:
        "Aplicación de escritorio que permite gestionar el inventario de herramientas de una empresa. Incluye control de préstamos, mantenimientos y reportes.",
      imageUrl: "/ERPPython.png",
      technologies: ["Python", "PostrgreSQL"],
      features: [
        "Autenticación de ususarios", 
        "Gestión de inventario con códigos QR",
        "Sistema de préstamos y devoluciones",
        "Programación de mantenimientos",
        "Reportes personalizables",
      ],
      challenges: [
        "Implementación de sistema offline-first",
        "Diseño de base de datos eficiente",
        "Integración con impresoras de tickets",
        "Creación de aplicación de escritorio"
      ],
      learnings: [
        "Uso de Python para crear aplicaciones de escritorio",
        "Gestión de estado en aplicaciones complejas",
        "Optimización de consultas SQL",
        "Uso de Python para crear aplicaciones de escritorio"
      ],
    },
    {
      slug: "otradimensión",
      title: "Otra Dimensión",
      subtitle: "",
      description:
        "Aplicación web para subir imágenes en un mapa y representar un evento. Esta aplicación fue creada para la hackathon Cloudinary CloudCreate: Spooky AI Hackathon.",
      imageUrl: "/OtraDimen.png",
      technologies: ["Angular", "Firebase", "Mapbox", "Cloudinary"],
      demoUrl: "https://otra-dimension.netlify.app/",
      githubUrl: "https://github.com/CarlosJimeEnez/otraDimension",
      features: [
        "Subir imágenes a Cloudinary",
        "Manipular imágenes con IA en Cloudinary",
        "Uso de Mapbox",
        "Uso de Firebase",
      ],
      challenges: [
        "Diseño de base de datos eficiente en Firebase",
        "Implementación de la IA con Cloudinary",
      ],
      learnings: [
        "Uso de Mapbox ",
        "Manipular imágenes con Cloudinary",
        "Uso de base de datos en Firebase",
      ],
    },
    {
      slug: "rutawallet",
      title: "RutaWallet",
      subtitle: "",
      description:
        "Aplicación móvil para gestionar el presupuesto de transporte público en Puebla.",
      imageUrl: "/RutaWallet.png",
      technologies: ["Flutter", "Supabase", "MapLibre", "GetX"],
      // demoUrl: "https://rutawallet.netlify.app/",
      githubUrl: "https://github.com/CarlosJimeEnez/ruta_app",
      challenges: [
        "Gestión de presupuesto",
        "Gestión de viajes",
        "Gestión de gastos",
      ],
      learnings: [
        "Diseño mobile",
        "Uso del gestor de estado GetX",
        "Uso de mapas en flutter",
        "Uso de base de datos en Supabase",
      ],
    },
  ];

  // Devolver un array de objetos con los parámetros para cada ruta
  return projects.map((project) => ({
    params: { slug: project.slug },
    props: { project },
  }));
}

// Recibir los datos del proyecto como props
const { project } = Astro.props;

// Destructurar los datos del proyecto
const {
  title,
  subtitle,
  description,
  imageUrl,
  technologies,
  githubUrl,
  demoUrl,
  features = [],
  challenges = [],
  learnings = [],
} = project;
---

<Main title={title}>
  <div class="min-h-screen bg-background dark:bg-accent/10 select-none">
    <Header />
    <main class="container mx-auto px-4 py-12 max-w-4xl">
      <!-- Botón de regreso -->
      <div class="mb-6">
        <a
          href="/"
          class="inline-flex items-center text-gray-600 hover:text-primary transition-colors"
        >
          <ArrowLeft size={18} className="mr-2" />
          <p class="dark:text-gray-300 text-gray-500">Volver a proyectos</p>
        </a>
      </div>

      <!-- Encabezado del proyecto -->
      <h1
        class="text-4xl md:text-5xl font-bold mb-6 bg-gradient-to-r from-primary to-[#2BAE66] text-transparent bg-clip-text"
      >
        {title}
      </h1>

      <div class="prose prose-lg dark:prose-invert max-w-none mb-10">
        <p class="text-lg text-gray-700 dark:text-gray-300">
          {description}
        </p>
      </div>

      <!-- Enlaces -->
      <section class="mb-12">
        <h2 class="text-2xl font-bold mb-4 flex items-center">
          <span class="text-primary mr-2">🌐</span> Demo
        </h2>
        <div class="flex flex-wrap gap-4">
          {
            githubUrl && (
              <a href={githubUrl} target="_blank" rel="noopener noreferrer">
                <Button
                  variant="outline"
                  size="lg"
                  className="inline-flex items-center"
                >
                  <Github className="mr-2" size={20} />
                  Ver código
                </Button>
              </a>
            )
          }
          {
            demoUrl && (
              <a href={demoUrl} target="_blank" rel="noopener noreferrer">
                <Button
                  variant="default"
                  size="lg"
                  className="inline-flex items-center shadow-lg hover:shadow-xl transition-shadow shadow-primary/30 dark:text-gray-50"
                >
                  <ExternalLink className="mr-2" size={20} />
                  <p>Ver demo</p>
                </Button>
              </a>
            )
          }
          {
            !githubUrl && !demoUrl && (
              <div class="px-6 py-3 bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg inline-flex items-center">
                <span class="text-gray-600 dark:text-gray-300 font-medium">Privado</span>
              </div>
            )
          }
        </div>
      </section>

      <!-- Imagen del proyecto -->
      <div
        class="mb-12 rounded-xl overflow-hidden shadow-xl border border-gray-200 dark:border-gray-800"
      >
        <img
          src={imageUrl}
          alt={`Captura de pantalla del proyecto ${title}`}
          class="w-full h-auto object-cover"
        />
      </div>

      <!-- Características -->
      {
        features.length > 0 && (
          <section class="mb-12">
            <h2 class="text-2xl font-bold mb-4 flex items-center">
              <span class="text-primary mr-2">🧩</span> Características
            </h2>
            <ul class="list-disc pl-6 space-y-2 text-gray-700 dark:text-gray-300">
              {features.map((feature) => (
                <li>{feature}</li>
              ))}
            </ul>
          </section>
        )
      }

      <!-- Tecnologías utilizadas -->
      <section class="mb-12">
        <h2 class="text-2xl font-bold mb-4 flex items-center">
          <span class="text-primary mr-2">💡</span> Tecnologías utilizadas
        </h2>
        <div class="flex flex-wrap gap-2">
          {
            technologies.map((tech) => (
              <span class="px-4 py-2 bg-gray-100 dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-full text-sm font-medium">
                {tech}
              </span>
            ))
          }
        </div>
      </section>

      <!-- Objetivo -->
      {
        challenges.length > 0 && (
          <section class="mb-12">
            <h2 class="text-2xl font-bold mb-4 flex items-center">
              <span class="text-primary mr-2">🎯</span> Desafíos
            </h2>
            <div class="prose prose-lg dark:prose-invert max-w-none">
              <ul class="list-disc pl-6 space-y-2 text-gray-700 dark:text-gray-300">
                {challenges.map((challenge) => (
                  <li>{challenge}</li>
                ))}
              </ul>
            </div>
          </section>
        )
      }

      <!-- Aprendizajes -->
      {
        learnings.length > 0 && (
          <section class="mb-12">
            <h2 class="text-2xl font-bold mb-4 flex items-center">
              <span class="text-primary mr-2">🚀</span> Aprendizajes
            </h2>
            <div class="prose prose-lg dark:prose-invert max-w-none">
              <ul class="list-disc pl-6 space-y-2 text-gray-700 dark:text-gray-300">
                {learnings.map((learning) => (
                  <li>{learning}</li>
                ))}
              </ul>
            </div>
          </section>
        )
      }

      <!-- CTA -->
      <section
        class="my-16 p-8 bg-gradient-to-r from-gray-100 to-gray-200 dark:from-gray-800 dark:to-gray-900 rounded-xl text-center"
      >
        <h2 class="text-2xl font-bold mb-4">
          ¿Listo para llevar tu idea al siguiente nivel?
        </h2>
        <p class="mb-6">Trabajemos juntos en tu próximo proyecto.</p>
        <a href="mailto:jc.jimenez.pena@outlook.com">
          <Button
            variant="default"
            size="lg"
            className="shadow-lg hover:shadow-xl transition-shadow shadow-primary/30 dark:text-gray-50"
          >
            Contáctame
          </Button>
        </a>
      </section>
    </main>
  </div>
  
</Main>
